security:
    role_hierarchy:

        ROLE_SUPER_ADMIN:
            - ROLE_ALLOWED_TO_SWITCH
            - ROLE_ADMIN
            - ROLE_PARAMETRAGE
            - ROLE_USER_EDIT
            - ROLE_STRUCTURE_CREATE
            - ROLE_STRUCTURE_DELETE
            - ROLE_PERSONNE_CREATE
            - ROLE_PERSONNE_DELETE
            - ROLE_ARTISTE_DELETE
            - ROLE_ACTION_DELETE
            - ROLE_CONTACT_EDIT
            - ROLE_CONTACT_DELETE
            - ROLE_VIP_EDIT

        ROLE_STRUCTURE_DELETE: ROLE_STRUCTURE_EDIT
        ROLE_STRUCTURE_EDIT: ROLE_STRUCTURE_VIEW
        ROLE_STRUCTURE_CREATE: ROLE_STRUCTURE_EDIT

        ROLE_ARTISTE_DELETE: ROLE_ARTISTE_EDIT
        ROLE_ARTISTE_EDIT: ROLE_ARTISTE_VIEW
        ROLE_ARTISTE_CREATE: ROLE_ARTISTE_EDIT

        ROLE_PERSONNE_DELETE: ROLE_PERSONNE_EDIT
        ROLE_PERSONNE_EDIT: ROLE_PERSONNE_VIEW
        ROLE_PERSONNE_CREATE: ROLE_PERSONNE_EDIT



        ROLE_CONTACT_DELETE: ROLE_CONTACT_EDIT
        ROLE_CONTACT_EDIT: ROLE_CONTACT_CREATE
        ROLE_CONTACT_CREATE: ROLE_CONTACT_VIEW

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Personne
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            switch_user: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'  # Clé secrète pour signer le cookie
                lifetime: 604800           # Durée de vie du cookie en secondes (7 jours ici)
                path: /
                always_remember_me: false   # Si true, le cookie est toujours créé, même si la case n'est pas cochée
                # Nom du cookie (optionnel)
                name: REMEMBERME
                # Domaine et sécurisé (optionnel, selon ton environnement)
                domain: ~
                secure: true               # Active si ton site est en HTTPS
                httponly: true             # Empêche l'accès au cookie via JavaScript

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
